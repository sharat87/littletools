// Pieces taken from <https://github.com/lezer-parser/javascript/blob/main/src/javascript.grammar>.

@top Program { value }

value {
  Number |
  String |
  Boolean |
  Array |
  Object |
  Identifier |
  Instantiation |
  FunctionCall
}

Array {
  '[' commaSep<ArrayValue> ']'
}

ArrayValue {
  value
}

Object {
  '{' commaSep<objectProperty> '}'
}

objectProperty {
	ObjectKey ':' ObjectValue
}

ObjectKey {
  String | Number | Identifier
}

ObjectValue {
  value
}

Instantiation {
  New FunctionCall
}

FunctionCall {
  Identifier "(" commaSep<value> ")"
}

commaSep<content> {
  "" | content (Comma content?)*
}

@tokens {
  spaces { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline { $[\r\n\u2028\u2029] }

  Comma { ',' }

  Number {
  	("+" | "-")? (
	  (@digit ("_" | @digit)* ("." ("_" | @digit)*)? | "." @digit ("_" | @digit)*)
	    (("e" | "E") ("+" | "-")? ("_" | @digit)+)? |
	  @digit ("_" | @digit)* "n" |
	  "0x" (@digit | $[a-fA-F] | "_")+ "n"? |
	  "0b" $[01_]+ "n"? |
	  "0o" $[0-7_]+ "n"?
    )
  }

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }

  Boolean {
    "true" |
	"false"
  }

  Identifier { identifierChar (identifierChar | @digit)* }

  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  New { "new" }

  LineComment { "//" ![\n]* }

  @precedence {
    Boolean, New, Identifier, spaces, newline
  }
}

@skip {
  spaces | newline | LineComment
}
